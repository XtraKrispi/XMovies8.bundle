HTTP_HEADERS = {
	'Accept	text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
	'Accept-Encoding:	gzip, deflate',
	'Accept-Language:	en-US,en;q=0.5',
	'Connection:		keep-alive',
	'Referer:		http://xmovies8.co',
	'User-Agent:		Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0'
}

########################################################################################
def NormalizeURL(url):

	return url.split('&')[0]


########################################################################################
def MetadataObjectForURL(url):

	page_data = HTML.ElementFromURL(url)
	title = page_data.xpath("//meta[@property='og:title']/@content")[0].replace('Xmovies8: ','',1).replace(' full movie Putlocker HD','',1).strip()
	try:
		description = page_data.xpath("//span[@class='metaContent'][3]/text()")[0]
	except:
		description = page_data.xpath("//span[@class='metaContent'][2]/text()")[0]
	thumb = page_data.xpath("//div[@class='article-image']/img/@src")[0]

	return VideoClipObject(
		title = title,
		summary = description,
		thumb = thumb
	)

########################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(key=Callback(PlayVideo, url=url, post_url=url, res=720))
			],
			video_resolution = 720,
			bitrate = 1500,
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True if Client.Product != 'Plex Web' else False
		)
	]

########################################################################################
@indirect
def PlayVideo(url, res):

	page = HTML.ElementFromURL(url)
	video_url = page.xpath("//div[@class='movie-download']/b/span/a/@href")[0]
	return IndirectResponse(VideoClipObject, key=video_url)
	